---
layout: post
title:  'Reading 13: Copyrights and Software'
date:   2018-04-23 14:00:00 -0500
categories: jekyll update
---
A copyright is basically a sort of ownership of a certain creation that is given to its creator.  For example, someone can buy a book, and read the book and learn from the book.  But they cannot make their own copies of the book and start selling those.  That is because the book’s author has ownership of the book (not the physical book but the content of the book) and therefore controls who can redistribute, etc.  The purpose is to incentivize innovation.  If you invent it, you own it.

Machine-readable code, it was decided, is also copyrightable.  This means that someone can develop a product and sell the product to others to use and benefit from, but the creator of the product can restrict others from redistributing this code as if it was their own.  I think things get a lot less black and white when we talk about software than when we talk about previously copyrightable entities.  

Open source licenses have been very popular in the tech industry.  It’s a different paradigm of creation.  Open source developers are not worried about owning the software they make, since they believe that the open source paradigm benefits everyone and allows everyone to learn and collaborate.  Part of the mentality is that it is better than companies making and charging everyone for whatever they make. 

It is hard to say that open source is “better” than propriety software or that one should always be preferred to the other.  My not very sophisticated opinion is that lower level, generic things are better to be developed at an open source level, but practical applications built on top of these things are better developed by companies.  There are tradeoffs with both propriety and open source software.  Open source is, of course, free, but without an entity behind the software that is (1) very coherent and (2) wants to make money and (3) has its public image in mind whenever making something, bugs can slide through the cracks in open source and the software can get messy.  On the other hand, sometimes crowdsourcing is definitely more efficient than a company (companies can be very inefficient), you can have a variety of thought processes contributing with open source, and the volume of what can be made seems like it would be larger with open collaboration.

The distinction between free software and open source software does seem to be pretty meaningful.  “Free” in free software is not meant to mean “costless” as in free beer.  Free software is a principle like free speech that claims we should have the right to run a program as we wish, study and alter a program as we wish, redistribute copies, and redistribute the modified software.  Some free software might actual cost money, and a lot of software that does not cost money also is not free.  

The biggest difference between GPL and BSD, two sort of “free software” licenses, seems to be whether or not modified software that is redistributed also needs to be free.  GPL requires this, BSD does not.  This makes BSD more truly free.  However, it is less fully in line with free software as a movement because people can make their advancements/modifications of previously free software non-free. 

I do not see why APIs should be inherently not copyrightable.  It makes sense to me that Oracle has seen Google making massive profits after building on top of technology it acquired and it now wants a share.  It really takes us into the blurry area of software on what is and is not copyrightable.  The courts have thus far determined that Oracle does have the rights to the APIs but only can earn compensation from Google if Google violated what was defined as “fair use.”  Without digging in deeper technically, it’s hard for me to evaluate if Google violated this.  This also can set a bad precedent, making things “open source, but only when we think the use constitutes fair use.”

I found this to be a pretty interesting and sophisticated topic.  I knew very little about the details of open source, free software, and especially the different licenses.  I am glad we are getting to it in this class, but I think it could be worthwhile to make things like this a bigger part of our curriculum earlier on (like how business students take Business Law).   I guess this is a conversation for next week when we discuss the computer science curriculum.  